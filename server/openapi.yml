# https://swagger.io/specification/
openapi: '3.0.2'
info:
  title: FreeCycle
  version: '0.0'
  description: |
    FreeCycle your old stuff - keep things out of landfill

    # Introduction
    * Help the poor
    * Climate crisis
    * Right to repair

    # Future ideas
    This is currently a REST API. A trivial bridge could be created to make this work with SMS.
    SMS is popular/accessible infrastructure in 3rd world countries.
    Some SMS API providers give rough geo-location of the sender.
    With simple SMS messages, people could offer there unheeded bits or even advertise skills.

    # Authentication
    As this is a service created as a learning activity, there is no security or authentication.

tags:
  - name: item
    description: An item that is advertised
  - name: item_model
    x-displayName: The item model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Item" />

x-tagGroups:
  - name: General
    tags:
      - item
  - name: Models
    tags:
      - item_model
servers:
  - url: //api.server.test/v1
    description: The deployed url of the api. Currently it is not hosted externally.
  

paths:
  '/item/':
    post:
      tags:
        - item
      summary: Add a new item
      description: Add a new item with geo-position that is available
      operationId: addItem
      requestBody:
        $ref: '#/components/requestBodies/ItemCreate'
      responses:
        '405':
          description: Invalid input
  '/item/{itemId}/':
    parameters:
      - name: itemId
        in: path
        description: ID of item to return
        required: true
        #deprecated: true
        schema:
          type: integer
          format: int64
    get:
      tags:
        - item
      summary: Single item by ID
      description: Returns a single item
      operationId: getItemById
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          description: Invalid ID supplied
        '404':
          description: Item not found

    delete:
      tags:
        - item
      summary: Remove an item
      description: Remove an item by itemID
      operationId: deleteItem
      responses:
        '400':
          description: Invalid itemID

  '/items/':
    parameters:
      - name: user_id
        in: query
        description: The user the item was created by
        style: form
        schema:
          type: string
      - name: keywords
        in: query
        description: A list of keywords that must all be present
        style: form
        schema:
          type: array
          items:
            type: string
      - name: lat
        in: query
        description: Latitude
        style: form
        schema:
          type: number
          format: double
      - name: lon
        in: query
        description: Longitude
        style: form
        schema:
          type: number
          format: double
      - name: radius
        in: query
        description: Radius from lat/lon default is 5?
        style: form
        schema:
          type: number
          format: double
      - name: date_from
        in: query
        description: Item was available from
        style: form
        schema:
          type: string
          format: date-time
      - name: date_to
        in: query
        description: Item was available to. Default is NOW
        style: form
        schema:
          type: string
          format: date-time
    get:
      tags:
        - item
      operationId: findItemsByQuery
      summary: List items from search criteria
      description: Get a list of items matching the search/query criteria
      responses:
        '200':
          description: get list of items matching query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
                #maxItems: 10
              #TODO: consider pagination?
  '/keywords/':
    get:
      tags:
        - keywords
      operationId: getKeywords
      summary: gets a list of all the keywords currently in use in the system across all Items
      responses:
        '200':
          description: keyword list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Keywords'

components:
  examples:
    Item:
      value:
        id: 1234
        # incomplete


  requestBodies:
    ItemCreate:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ItemCreate'
      description: A subset of item fields to create an Item object. dates and item_id will be populated/generated automatically on creation.
      required: true

  schemas:
    Id:
      type: integer
      format: int64
      readOnly: true

    Location:
      type: object
      properties:
        lat:
          type: number
          format: double
          example: 51.2798438
        lon:
          type: number
          format: double
          example: 1.0830275

    DateRange:
      type: object
      properties:
        date_from:
          type: string
          format: date-time
        date_to:
          type: string
          format: date-time

    Keywords:
      description: list of keywords
      type: array
      items:
        type: string
      example: ["hammer", "nails", "tools"]


    ItemCreate:
      required:
        - user_id
        - keywords
        - description
        - lat
        - lon
      allOf:
        - type: object
          properties:
            user_id:
              description: User ID
              type: string
              example: "user1234"
            keywords:
              $ref: '#/components/schemas/Keywords'
            description:
              type: string
              example: "A hammer and nails set"
            image:
              type: string
              description: A URL or a BASE64 encoded image
              example: https://placekitten.com/200/300
        - $ref: '#/components/schemas/Location'

    Item:
      required:
        - date_from
        - id
      allOf:
        - type: object
          properties:
            id:
              description: Item ID
              allOf:
                - $ref: '#/components/schemas/Id'
        - $ref: '#/components/schemas/ItemCreate'
        - $ref: '#/components/schemas/DateRange'

